from steps.step import Step
from utils import command
import os


class DotFilesStep(Step):
    def __init__(self, root_dir):
        super().__init__("dotfiles")
        self.root_dir = root_dir
        self.files_map = dict()
        self.symlinks = []
        self._setup_hardcoded_settings()

    def _setup_hardcoded_settings(self):
        self.add_dotfile_section(
            ".profile",
            "Some constants",
            [
                f"export LINUX_SETUP_ROOT={self.root_dir}",
                "export EDITOR=nano",
                "export BROWSER=firefox",
                "export TERMINAL='st -e'",
            ],
        )
        self.add_dotfile_section(
            ".profile",
            "Convenience scripts",
            [
                "source ~/Scripts/BashUtils/load_functions.sh",
            ],
        )
        self.add_dotfile_section(
            ".profile",
            "Allow attaching debugger to a running process",
            [
                "echo 0 | sudo tee '/proc/sys/kernel/yama/ptrace_scope' > /dev/null",
            ],
        )
        self.add_dotfile_section(
            ".profile",
            "Automatically color ls output",
            [
                "alias ls='ls --color=auto'",
            ],
        )
        self.add_dotfile_section(
            ".profile",
            "Bash prompt",
            [
                r"export PS1='\[\e[33m\][\[\e[m\]\[\e[31m\]\u\[\e[m\]\[\e[33m\]@\[\e[m\]\[\e[31m\]\h\[\e[m\]\[\e[31m\] \[\e[m\]\[\e[36m\]\w\[\e[m\]\[\e[33m\]]\[\e[m\]\[\e[31m\]\\$\[\e[m\] '",
            ],
        )
        self.add_dotfile_section(
            ".profile",
            "Automatically startup GUI only on tty1",
            [
                '[[ -z "$DISPLAY" ]] && [[ $(tty) = /dev/tty1 ]] && startx',
            ],
        )
        self.add_dotfile_symlink(".profile", ".bashrc")

    def _perform_impl(self):
        for dotfile, lines in self.files_map.items():
            with open(dotfile, "w") as file:
                file.writelines((f"{x}\n" for x in lines))

        for src, dst in self.symlinks:
            os.remove(dst)
            os.symlink(src, dst)

    def add_dotfile_lines(self, dotfile, lines, prepend_home_dir=True):
        if prepend_home_dir:
            dotfile = f'{os.environ["HOME"]}/{dotfile}'

        if dotfile not in self.files_map:
            self.files_map[dotfile] = [
                "#! usr/bin/sh",
                "#",
                "# This file has been autogenerated by LinuxSetup.",
                "# Do not change it manually",
                "#",
                "",
            ]
        self.files_map[dotfile] += lines

    def add_dotfile_section(self, dotfile, section_comment, lines, prepend_home_dir=True):
        lines = [f'# {section_comment}'] + lines + [""]
        self.add_dotfile_lines(dotfile, lines, prepend_home_dir)

    def add_dotfile_symlink(self, src, dst, prepend_home_dir=True):
        if prepend_home_dir:
            src = f'{os.environ["HOME"]}/{src}'
            dst = f'{os.environ["HOME"]}/{dst}'
        self.symlinks.append((src, dst))
