diff --git a/config.def.h b/config.def.h
index 312239b..232a005 100644
--- a/config.def.h
+++ b/config.def.h
@@ -1,44 +1,50 @@
 /* See LICENSE file for copyright and license details. */
 
 /* appearance */
-static const int vertpad            = 10;  /* vertical padding of bar */
-static const int sidepad            = 10;  /* horizontal padding of bar */
+static  int vertpad            = 10;       /* vertical padding of bar */
+static  int sidepad            = 10;       /* horizontal padding of bar */
 static  unsigned int borderpx  = 1;        /* border pixel of windows */
 static  unsigned int gappx     = 5;        /* gaps between windows */
 static  unsigned int snap      = 32;       /* snap pixel */
 static  int showbar            = 1;        /* 0 means no bar */
 static  int topbar             = 1;        /* 0 means bottom bar */
-static const char *fonts[]          = { "monospace:size=10" };
-static const char dmenufont[]       = "monospace:size=10";
+static const char *fonts[]          = { "monospace:size=15", "JoyPixels:size=11" };
+static const char dmenufont[]       = "monospace:size=15";
 static char normbgcolor[]           = "#222222";
 static char normbordercolor[]       = "#444444";
 static char normfgcolor[]           = "#bbbbbb";
 static char selfgcolor[]            = "#eeeeee";
 static char selbordercolor[]        = "#005577";
 static char selbgcolor[]            = "#005577";
-static char col_black[]       = "#000000";
-static char col_red[]         = "#ff0000";
-static char col_yellow[]      = "#ffff00";
-static char col_white[]       = "#ffffff";
+static char appbarbgcolor[]         = "#333333";
+static char statusbarcolor1[]       = "#000000";
+static char statusbarcolor2[]       = "#ffff00";
+
 static char *colors[][3] = {
-       /*               fg           bg           border   */
-       [SchemeNorm]   = { normfgcolor, normbgcolor, normbordercolor },
-       [SchemeSel]    = { selfgcolor,  selbgcolor,  selbordercolor  },
-       [SchemeWarn]   = { col_black, col_yellow, col_red },
-       [SchemeUrgent] = { col_white, col_red,    col_red },
+       /*                         fg                  bg                     border   */
+       [SchemeNorm]           = { normfgcolor,        normbgcolor,           normbordercolor },      // 1
+       [SchemeSel]            = { selfgcolor,         selbgcolor,            selbordercolor  },      // 2
+       [SchemeAppBar]         = { normfgcolor,        appbarbgcolor,         normbordercolor  },     // 3
+       [SchemeStatusBarStart] = { statusbarcolor1,    appbarbgcolor,         normbordercolor  },     // 4
+       [SchemeStatusBar1]     = { statusbarcolor1,    statusbarcolor2,       normbordercolor  },     // 5
+       [SchemeStatusBar2]     = { statusbarcolor2,    statusbarcolor1,       normbordercolor  },     // 6
 };
 
 /* tagging */
-static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
+static const char *tags[] = { "", "", "", "", "", "", "", "", "" };
 
 static const Rule rules[] = {
 	/* xprop(1):
 	 *	WM_CLASS(STRING) = instance, class
 	 *	WM_NAME(STRING) = title
 	 */
-	/* class      instance    title       tags mask     isfloating   monitor */
-	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
-	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
+	/* class          instance    title       tags mask          isfloating   monitor disableborder      utilwindow*/
+	{ "firefox",      NULL,       NULL,       1 << 1,            0,           -1,     0,                 0 },
+	{ "Chromium",     NULL,       NULL,       1 << 1,            0,           -1,     0,                 0 },
+	{ "code-oss",     NULL,       NULL,       1 << 2,            0,           -1,     0,                 0 },
+	{ "vlc",          NULL,       NULL,       1 << 3,            0,           -1,     0,                 0 },
+	{ "Synapse",      NULL,       NULL,       0,                 0,           -1,     1,                 0 },
+	{ "stalonetray",  NULL,       NULL,       TAGMASK,           0,           -1,     1,                 1 },
 };
 
 /* layout(s) */
@@ -54,7 +60,7 @@ static const Layout layouts[] = {
 };
 
 /* key definitions */
-#define MODKEY Mod1Mask
+#define MODKEY Mod4Mask
 #define TAGKEYS(KEY,TAG) \
 	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
 	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
@@ -66,8 +72,7 @@ static const Layout layouts[] = {
 
 /* commands */
 static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
-static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbordercolor, "-sf", selfgcolor, NULL };
-static const char *termcmd[]  = { "st", NULL };
+static const char *dmenucmd[] = { "dmenu_run", NULL };
 
 /*
  * Xresources preferences to load at startup
@@ -79,19 +84,24 @@ ResourcePref resources[] = {
 		{ "selbgcolor",         STRING,  &selbgcolor },
 		{ "selbordercolor",     STRING,  &selbordercolor },
 		{ "selfgcolor",         STRING,  &selfgcolor },
+		{ "appbarbgcolor",    	STRING,   &appbarbgcolor },
+		{ "statusbarcolor1",  	STRING,   &statusbarcolor1 },
+		{ "statusbarcolor2",   	STRING,   &statusbarcolor2 },
 		{ "borderpx",          	INTEGER, &borderpx },
 		{ "snap",          		INTEGER, &snap },
 		{ "showbar",          	INTEGER, &showbar },
 		{ "topbar",          	INTEGER, &topbar },
 		{ "nmaster",          	INTEGER, &nmaster },
 		{ "resizehints",       	INTEGER, &resizehints },
+		{ "gappx",       	    INTEGER, &gappx },
+		{ "sidepad",       	    INTEGER, &sidepad },
+		{ "sidepad",       	    INTEGER, &sidepad },
 		{ "mfact",      	 	FLOAT,   &mfact },
 };
 
 static Key keys[] = {
 	/* modifier                     key        function        argument */
 	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
-	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
 	{ MODKEY,                       XK_b,      togglebar,      {0} },
 	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
 	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
@@ -107,6 +117,8 @@ static Key keys[] = {
 	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
 	{ MODKEY,                       XK_space,  setlayout,      {0} },
 	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
+	{ MODKEY,                       XK_Left,   cycleview,      {.i = 1 } },
+	{ MODKEY,                       XK_Right,  cycleview,      {.i = -1 } },
 	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
 	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
 	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
@@ -138,6 +150,8 @@ static Button buttons[] = {
 	{ ClkStatusText,        0,              Button1,        sigdwmblocks,   {.i = 1} },
 	{ ClkStatusText,        0,              Button2,        sigdwmblocks,   {.i = 2} },
 	{ ClkStatusText,        0,              Button3,        sigdwmblocks,   {.i = 3} },
+	{ ClkStatusText,        0,              Button4,        sigdwmblocks,   {.i = 4} },
+	{ ClkStatusText,        0,              Button5,        sigdwmblocks,   {.i = 5} },
 	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
 	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
 	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
diff --git a/dwm.c b/dwm.c
index 533d169..f805736 100644
--- a/dwm.c
+++ b/dwm.c
@@ -60,7 +60,7 @@
 
 /* enums */
 enum { CurNormal, CurResize, CurMove, CurLast }; /* cursor */
-enum { SchemeNorm, SchemeSel, SchemeWarn, SchemeUrgent }; /* color schemes */
+enum { SchemeNorm, SchemeSel, SchemeAppBar, SchemeStatusBarStart, SchemeStatusBar1, SchemeStatusBar2 }; /* color schemes */
 enum { NetSupported, NetWMName, NetWMState, NetWMCheck,
        NetWMFullscreen, NetActiveWindow, NetWMWindowType,
        NetWMWindowTypeDialog, NetClientList, NetLast }; /* EWMH atoms */
@@ -98,6 +98,7 @@ struct Client {
 	Client *snext;
 	Monitor *mon;
 	Window win;
+	int utilwindow;
 };
 
 typedef struct {
@@ -141,6 +142,8 @@ typedef struct {
 	unsigned int tags;
 	int isfloating;
 	int monitor;
+	int disableborder;
+	int utilwindow;
 } Rule;
 
 /* Xresources preferences */
@@ -246,6 +249,7 @@ static void updatetitle(Client *c);
 static void updatewindowtype(Client *c);
 static void updatewmhints(Client *c);
 static void view(const Arg *arg);
+void cycleview(const Arg *arg);
 static Client *wintoclient(Window w);
 static Monitor *wintomon(Window w);
 static int xerror(Display *dpy, XErrorEvent *ee);
@@ -329,6 +333,9 @@ applyrules(Client *c)
 			for (m = mons; m && m->num != r->monitor; m = m->next);
 			if (m)
 				c->mon = m;
+			if (r->disableborder)
+				c->bw = 0;
+			c->utilwindow = r->utilwindow;
 		}
 	}
 	if (ch.res_class)
@@ -801,6 +808,10 @@ drawbar(Monitor *m)
 	}
 
 	for (c = m->clients; c; c = c->next) {
+		if (c->utilwindow) {
+			continue;
+		}
+
 		occ |= c->tags;
 		if (c->isurgent)
 			urg |= c->tags;
@@ -821,8 +832,8 @@ drawbar(Monitor *m)
 	x = drw_text(drw, x, 0, w, bh, lrpad / 2, m->ltsymbol, 0);
 
 	if ((w = m->ww - sw - x) > bh) {
-		if (m->sel) {
-			drw_setscheme(drw, scheme[m == selmon ? SchemeSel : SchemeNorm]);
+		if (m->sel && !m->sel->utilwindow) {
+			drw_setscheme(drw, scheme[SchemeAppBar]);
 			drw_text(drw, x, 0, w - 2 * sp, bh, lrpad / 2, m->sel->name, 0);
 			if (m->sel->isfloating)
 				drw_rect(drw, x + boxs, boxs, boxw, boxw, m->sel->isfixed, 0);
@@ -1135,6 +1146,8 @@ manage(Window w, XWindowAttributes *wa)
 	c->oldbw = wa->border_width;
 
 	updatetitle(c);
+	c->bw = borderpx;
+	c->utilwindow = 0;
 	if (XGetTransientForHint(dpy, w, &trans) && (t = wintoclient(trans))) {
 		c->mon = t->mon;
 		c->tags = t->tags;
@@ -1151,7 +1164,6 @@ manage(Window w, XWindowAttributes *wa)
 	/* only fix client y-offset, if the client center might cover the bar */
 	c->y = MAX(c->y, ((c->mon->by == c->mon->my) && (c->x + (c->w / 2) >= c->mon->wx)
 		&& (c->x + (c->w / 2) < c->mon->wx + c->mon->ww)) ? bh : c->mon->my);
-	c->bw = borderpx;
 
 	wc.border_width = c->bw;
 	XConfigureWindow(dpy, w, CWBorderWidth, &wc);
@@ -2182,6 +2194,32 @@ view(const Arg *arg)
 	arrange(selmon);
 }
 
+void
+cycleview(const Arg *arg)
+{
+	const int minTagMask = 1;
+	const int maxTagPos = LENGTH(tags) - 1;
+	const int maxTagMask = 1 << maxTagPos;
+
+	int t = selmon->tagset[selmon->seltags];
+	const int boundaryBit = arg->i > 0 ? ((t & minTagMask) << maxTagPos) : ((t & maxTagMask) >> maxTagPos);
+
+	if (arg->i > 0)
+		t >>= arg->i;
+	else
+		t <<= -arg->i;
+
+	if (boundaryBit)
+		t |= boundaryBit;
+	else
+		t &= (~boundaryBit);
+
+	selmon->tagset[selmon->seltags] = t & TAGMASK;
+
+	focus(NULL);
+	arrange(selmon);
+}
+
 Client *
 wintoclient(Window w)
 {
